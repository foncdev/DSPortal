import { describe, it, expect } from 'vitest';
import {
  isValidUsername,
  getUsernameValidationError,
  isValidEmail,
  validatePassword,
  PasswordStrength,
  doPasswordsMatch,
  isValidPhoneNumber,
  formatPhoneNumber,
  isValidName,
  isValidCompanyName
} from './index';

describe('유효성 검사 유틸리티', () => {
  describe('사용자 아이디 검증', () => {
    it('유효한 사용자 아이디를 올바르게 검증해야 함', () => {
      expect(isValidUsername('user1')).toBe(true);
      expect(isValidUsername('john_doe')).toBe(true);
      expect(isValidUsername('alex-smith')).toBe(true);
      expect(isValidUsername('User_Name123')).toBe(true);
    });

    it('유효하지 않은 사용자 아이디를 올바르게 거부해야 함', () => {
      expect(isValidUsername('')).toBe(false);
      expect(isValidUsername('abc')).toBe(false); // 너무 짧음
      expect(isValidUsername('1user')).toBe(false); // 숫자로 시작
      expect(isValidUsername('user@name')).toBe(false); // 유효하지 않은 문자 포함
      expect(isValidUsername('user name')).toBe(false); // 공백 포함
      expect(isValidUsername('abcdefghijklmnopqrstuvwxyz')).toBe(false); // 너무 김
    });

    it('유효하지 않은 사용자 아이디에 대해 적절한 오류 메시지를 반환해야 함', () => {
      expect(getUsernameValidationError('')).toBe('아이디를 입력해주세요');
      expect(getUsernameValidationError('abc')).toBe('아이디는 최소 4자 이상이어야 합니다');
      expect(getUsernameValidationError('abcdefghijklmnopqrstu')).toBe('아이디는 최대 20자까지 가능합니다');
      expect(getUsernameValidationError('1user')).toBe('아이디는 알파벳으로 시작해야 합니다');
      expect(getUsernameValidationError('user@name')).toBe('아이디는 알파벳, 숫자, 언더스코어(_), 하이픈(-)만 포함할 수 있습니다');
    });
  });

  describe('이메일 검증', () => {
    it('유효한 이메일 주소를 올바르게 검증해야 함', () => {
      expect(isValidEmail('user@example.com')).toBe(true);
      expect(isValidEmail('user.name@example.com')).toBe(true);
      expect(isValidEmail('user+tag@example.com')).toBe(true);
      expect(isValidEmail('user@sub.example.com')).toBe(true);
    });

    it('유효하지 않은 이메일 주소를 올바르게 거부해야 함', () => {
      expect(isValidEmail('')).toBe(false);
      expect(isValidEmail('userexample.com')).toBe(false); // @ 없음
      expect(isValidEmail('user@')).toBe(false); // 도메인 없음
      expect(isValidEmail('user@example')).toBe(true); // 최신 RFC 5322는 TLD 없는 이메일 허용
      expect(isValidEmail('user@.com')).toBe(false); // 잘못된 도메인
    });
  });

  describe('비밀번호 검증', () => {
    it('강력한 비밀번호를 올바르게 평가해야 함', () => {
      const strongPassword = validatePassword('ABCdef123!');
      expect(strongPassword.isValid).toBe(true);
      expect(strongPassword.strength).toBe(PasswordStrength.STRONG);
      expect(strongPassword.hasLowerCase).toBe(true);
      expect(strongPassword.hasUpperCase).toBe(true);
      expect(strongPassword.hasNumber).toBe(true);
      expect(strongPassword.hasSpecialChar).toBe(true);
      expect(strongPassword.isLongEnough).toBe(true);
      expect(strongPassword.errors.length).toBe(0);
    });

    it('중간 강도의 비밀번호를 올바르게 평가해야 함', () => {
      const mediumPassword = validatePassword('Abcdef123');
      expect(mediumPassword.isValid).toBe(false); // 특수문자 없음
      expect(mediumPassword.strength).toBe(PasswordStrength.MEDIUM);
      expect(mediumPassword.hasSpecialChar).toBe(false);
      expect(mediumPassword.errors).toContain('특수문자를 포함해야 합니다');
    });

    it('약한 비밀번호를 올바르게 평가해야 함', () => {
      const weakPassword = validatePassword('abcdef');
      expect(weakPassword.isValid).toBe(false);
      expect(weakPassword.strength).toBe(PasswordStrength.WEAK);
      expect(weakPassword.hasUpperCase).toBe(false);
      expect(weakPassword.hasNumber).toBe(false);
      expect(weakPassword.hasSpecialChar).toBe(false);
      expect(weakPassword.isLongEnough).toBe(false);
      expect(weakPassword.errors.length).toBeGreaterThan(0);
    });

    it('비밀번호 일치 여부를 올바르게 확인해야 함', () => {
      expect(doPasswordsMatch('password123', 'password123')).toBe(true);
      expect(doPasswordsMatch('password123', 'Password123')).toBe(false);
    });
  });

  describe('전화번호 검증', () => {
    it('유효한 전화번호를 올바르게 검증해야 함', () => {
      expect(isValidPhoneNumber('01012345678')).toBe(true);
      expect(isValidPhoneNumber('010-1234-5678')).toBe(true);
      expect(isValidPhoneNumber('+82 10-1234-5678')).toBe(true);
      expect(isValidPhoneNumber('(02) 1234-5678')).toBe(true);
    });

    it('유효하지 않은 전화번호를 올바르게 거부해야 함', () => {
      expect(isValidPhoneNumber('')).toBe(false);
      expect(isValidPhoneNumber('123')).toBe(false); // 너무 짧음
      expect(isValidPhoneNumber('abcdefghij')).toBe(false); // 숫자 아님
    });

    it('전화번호를 올바르게 포맷팅해야 함', () => {
      expect(formatPhoneNumber('01012345678')).toBe('010-1234-5678');
      expect(formatPhoneNumber('010-1234-5678')).toBe('010-1234-5678'); // 이미 포맷팅됨
      expect(formatPhoneNumber('+821012345678')).toBe('+821012345678'); // 국제 번호는 유지
    });
  });

  describe('이름 검증', () => {
    it('유효한 이름을 올바르게 검증해야 함', () => {
      expect(isValidName('홍길동')).toBe(true);
      expect(isValidName('John Doe')).toBe(true);
      expect(isValidName('  Kim  ')).toBe(true); // 앞뒤 공백 제거 후 검증
    });

    it('유효하지 않은 이름을 올바르게 거부해야 함', () => {
      expect(isValidName('')).toBe(false);
      expect(isValidName('a')).toBe(false); // 너무 짧음
      expect(isValidName('a'.repeat(51))).toBe(false); // 너무 김
    });
  });

  describe('회사명 검증', () => {
    it('유효한 회사명을 올바르게 검증해야 함', () => {
      expect(isValidCompanyName('Example Corp')).toBe(true);
      expect(isValidCompanyName('(주)코리아 주식회사')).toBe(true);
      expect(isValidCompanyName('ABC-123 Inc.')).toBe(true);
    });

    it('유효하지 않은 회사명을 올바르게 거부해야 함', () => {
      expect(isValidCompanyName('')).toBe(false);
      expect(isValidCompanyName('a')).toBe(false); // 너무 짧음
      expect(isValidCompanyName('a'.repeat(101))).toBe(false); // 너무 김
    });
  });
});